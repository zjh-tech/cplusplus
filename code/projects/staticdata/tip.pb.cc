// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tip.proto

#include "tip.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tip_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tip_tip_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tip_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tipcfg_DatasEntry_DoNotUse_tip_2eproto;
namespace config {
class tipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tip> _instance;
} _tip_default_instance_;
class tipcfg_DatasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tipcfg_DatasEntry_DoNotUse> _instance;
} _tipcfg_DatasEntry_DoNotUse_default_instance_;
class tipcfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tipcfg> _instance;
} _tipcfg_default_instance_;
}  // namespace config
static void InitDefaultsscc_info_tip_tip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_tip_default_instance_;
    new (ptr) ::config::tip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::tip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tip_tip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tip_tip_2eproto}, {}};

static void InitDefaultsscc_info_tipcfg_tip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_tipcfg_default_instance_;
    new (ptr) ::config::tipcfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::tipcfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tipcfg_tip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tipcfg_tip_2eproto}, {
      &scc_info_tipcfg_DatasEntry_DoNotUse_tip_2eproto.base,}};

static void InitDefaultsscc_info_tipcfg_DatasEntry_DoNotUse_tip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_tipcfg_DatasEntry_DoNotUse_default_instance_;
    new (ptr) ::config::tipcfg_DatasEntry_DoNotUse();
  }
  ::config::tipcfg_DatasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tipcfg_DatasEntry_DoNotUse_tip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tipcfg_DatasEntry_DoNotUse_tip_2eproto}, {
      &scc_info_tip_tip_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tip_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tip_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tip_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tip_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::tip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::config::tip, id_),
  PROTOBUF_FIELD_OFFSET(::config::tip, desc_),
  PROTOBUF_FIELD_OFFSET(::config::tip, str_),
  PROTOBUF_FIELD_OFFSET(::config::tip, value_),
  PROTOBUF_FIELD_OFFSET(::config::tipcfg_DatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::tipcfg_DatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::config::tipcfg_DatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::config::tipcfg_DatasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::tipcfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::config::tipcfg, datas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::config::tip)},
  { 9, 16, sizeof(::config::tipcfg_DatasEntry_DoNotUse)},
  { 18, -1, sizeof(::config::tipcfg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_tip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_tipcfg_DatasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_tipcfg_default_instance_),
};

const char descriptor_table_protodef_tip_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ttip.proto\022\006config\";\n\003tip\022\n\n\002Id\030\001 \001(\r\022\014"
  "\n\004Desc\030\002 \001(\t\022\013\n\003Str\030\003 \001(\t\022\r\n\005Value\030\004 \001(\r"
  "\"m\n\006tipcfg\022(\n\005datas\030\001 \003(\0132\031.config.tipcf"
  "g.DatasEntry\0329\n\nDatasEntry\022\013\n\003key\030\001 \001(\r\022"
  "\032\n\005value\030\002 \001(\0132\013.config.tip:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tip_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tip_2eproto_sccs[3] = {
  &scc_info_tip_tip_2eproto.base,
  &scc_info_tipcfg_tip_2eproto.base,
  &scc_info_tipcfg_DatasEntry_DoNotUse_tip_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tip_2eproto_once;
static bool descriptor_table_tip_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tip_2eproto = {
  &descriptor_table_tip_2eproto_initialized, descriptor_table_protodef_tip_2eproto, "tip.proto", 199,
  &descriptor_table_tip_2eproto_once, descriptor_table_tip_2eproto_sccs, descriptor_table_tip_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_tip_2eproto::offsets,
  file_level_metadata_tip_2eproto, 3, file_level_enum_descriptors_tip_2eproto, file_level_service_descriptors_tip_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tip_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tip_2eproto), true);
namespace config {

// ===================================================================

void tip::InitAsDefaultInstance() {
}
class tip::_Internal {
 public:
};

tip::tip()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.tip)
}
tip::tip(const tip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:config.tip)
}

void tip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tip_tip_2eproto.base);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

tip::~tip() {
  // @@protoc_insertion_point(destructor:config.tip)
  SharedDtor();
}

void tip::SharedDtor() {
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tip& tip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tip_tip_2eproto.base);
  return *internal_default_instance();
}


void tip::Clear() {
// @@protoc_insertion_point(message_clear_start:config.tip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

const char* tip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.tip.Desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.tip.Str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.tip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string Desc = 2;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.tip.Desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // string Str = 3;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.tip.Str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str(), target);
  }

  // uint32 Value = 4;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.tip)
  return target;
}

size_t tip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.tip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Desc = 2;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string Str = 3;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // uint32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.tip)
  GOOGLE_DCHECK_NE(&from, this);
  const tip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.tip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.tip)
    MergeFrom(*source);
  }
}

void tip::MergeFrom(const tip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.tip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void tip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.tip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tip::CopyFrom(const tip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.tip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tip::IsInitialized() const {
  return true;
}

void tip::InternalSwap(tip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

tipcfg_DatasEntry_DoNotUse::tipcfg_DatasEntry_DoNotUse() {}
tipcfg_DatasEntry_DoNotUse::tipcfg_DatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void tipcfg_DatasEntry_DoNotUse::MergeFrom(const tipcfg_DatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata tipcfg_DatasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void tipcfg_DatasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void tipcfg::InitAsDefaultInstance() {
}
class tipcfg::_Internal {
 public:
};

tipcfg::tipcfg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.tipcfg)
}
tipcfg::tipcfg(const tipcfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datas_.MergeFrom(from.datas_);
  // @@protoc_insertion_point(copy_constructor:config.tipcfg)
}

void tipcfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tipcfg_tip_2eproto.base);
}

tipcfg::~tipcfg() {
  // @@protoc_insertion_point(destructor:config.tipcfg)
  SharedDtor();
}

void tipcfg::SharedDtor() {
}

void tipcfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tipcfg& tipcfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tipcfg_tip_2eproto.base);
  return *internal_default_instance();
}


void tipcfg::Clear() {
// @@protoc_insertion_point(message_clear_start:config.tipcfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _internal_metadata_.Clear();
}

const char* tipcfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .config.tip> datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&datas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tipcfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.tipcfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .config.tip> datas = 1;
  if (!this->_internal_datas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::config::tip >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_datas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_datas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::config::tip >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::config::tip >::const_iterator
          it = this->_internal_datas().begin();
          it != this->_internal_datas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = tipcfg_DatasEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::config::tip >::const_iterator
          it = this->_internal_datas().begin();
          it != this->_internal_datas().end(); ++it) {
        target = tipcfg_DatasEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.tipcfg)
  return target;
}

size_t tipcfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.tipcfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .config.tip> datas = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_datas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::config::tip >::const_iterator
      it = this->_internal_datas().begin();
      it != this->_internal_datas().end(); ++it) {
    total_size += tipcfg_DatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tipcfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.tipcfg)
  GOOGLE_DCHECK_NE(&from, this);
  const tipcfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tipcfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.tipcfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.tipcfg)
    MergeFrom(*source);
  }
}

void tipcfg::MergeFrom(const tipcfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.tipcfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void tipcfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.tipcfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tipcfg::CopyFrom(const tipcfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.tipcfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tipcfg::IsInitialized() const {
  return true;
}

void tipcfg::InternalSwap(tipcfg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datas_.Swap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tipcfg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::config::tip* Arena::CreateMaybeMessage< ::config::tip >(Arena* arena) {
  return Arena::CreateInternal< ::config::tip >(arena);
}
template<> PROTOBUF_NOINLINE ::config::tipcfg_DatasEntry_DoNotUse* Arena::CreateMaybeMessage< ::config::tipcfg_DatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::config::tipcfg_DatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::config::tipcfg* Arena::CreateMaybeMessage< ::config::tipcfg >(Arena* arena) {
  return Arena::CreateInternal< ::config::tipcfg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
