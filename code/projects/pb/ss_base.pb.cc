// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_base.proto

#include "ss_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ss_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sd_conn_attr_ss_5fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_service_discovery_ss_5fbase_2eproto;
namespace pb {
class s2s_server_session_veriry_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<s2s_server_session_veriry_req> _instance;
} _s2s_server_session_veriry_req_default_instance_;
class s2s_server_session_veriry_ackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<s2s_server_session_veriry_ack> _instance;
} _s2s_server_session_veriry_ack_default_instance_;
class s2s_server_session_pingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<s2s_server_session_ping> _instance;
} _s2s_server_session_ping_default_instance_;
class s2s_server_session_pongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<s2s_server_session_pong> _instance;
} _s2s_server_session_pong_default_instance_;
class s2s_client_session_pingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<s2s_client_session_ping> _instance;
} _s2s_client_session_ping_default_instance_;
class s2s_client_session_pongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<s2s_client_session_pong> _instance;
} _s2s_client_session_pong_default_instance_;
class sd_conn_attrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sd_conn_attr> _instance;
} _sd_conn_attr_default_instance_;
class service_discoveryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<service_discovery> _instance;
} _service_discovery_default_instance_;
class service_discovery_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<service_discovery_req> _instance;
} _service_discovery_req_default_instance_;
class service_discovery_ackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<service_discovery_ack> _instance;
} _service_discovery_ack_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_s2s_client_session_ping_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_s2s_client_session_ping_default_instance_;
    new (ptr) ::pb::s2s_client_session_ping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::s2s_client_session_ping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s2s_client_session_ping_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_s2s_client_session_ping_ss_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_s2s_client_session_pong_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_s2s_client_session_pong_default_instance_;
    new (ptr) ::pb::s2s_client_session_pong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::s2s_client_session_pong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s2s_client_session_pong_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_s2s_client_session_pong_ss_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_s2s_server_session_ping_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_s2s_server_session_ping_default_instance_;
    new (ptr) ::pb::s2s_server_session_ping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::s2s_server_session_ping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s2s_server_session_ping_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_s2s_server_session_ping_ss_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_s2s_server_session_pong_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_s2s_server_session_pong_default_instance_;
    new (ptr) ::pb::s2s_server_session_pong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::s2s_server_session_pong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s2s_server_session_pong_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_s2s_server_session_pong_ss_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_s2s_server_session_veriry_ack_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_s2s_server_session_veriry_ack_default_instance_;
    new (ptr) ::pb::s2s_server_session_veriry_ack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::s2s_server_session_veriry_ack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s2s_server_session_veriry_ack_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_s2s_server_session_veriry_ack_ss_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_s2s_server_session_veriry_req_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_s2s_server_session_veriry_req_default_instance_;
    new (ptr) ::pb::s2s_server_session_veriry_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::s2s_server_session_veriry_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_s2s_server_session_veriry_req_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_s2s_server_session_veriry_req_ss_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_sd_conn_attr_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_sd_conn_attr_default_instance_;
    new (ptr) ::pb::sd_conn_attr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::sd_conn_attr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sd_conn_attr_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sd_conn_attr_ss_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_service_discovery_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_service_discovery_default_instance_;
    new (ptr) ::pb::service_discovery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::service_discovery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_service_discovery_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_service_discovery_ss_5fbase_2eproto}, {
      &scc_info_sd_conn_attr_ss_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_service_discovery_ack_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_service_discovery_ack_default_instance_;
    new (ptr) ::pb::service_discovery_ack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::service_discovery_ack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_service_discovery_ack_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_service_discovery_ack_ss_5fbase_2eproto}, {
      &scc_info_service_discovery_ss_5fbase_2eproto.base,}};

static void InitDefaultsscc_info_service_discovery_req_ss_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_service_discovery_req_default_instance_;
    new (ptr) ::pb::service_discovery_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::service_discovery_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_service_discovery_req_ss_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_service_discovery_req_ss_5fbase_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ss_5fbase_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ss_5fbase_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ss_5fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ss_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, server_type_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, server_type_str_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, ip_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_client_session_ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_client_session_pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, server_type_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, server_type_str_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, inter_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, outer_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, s2s_inter_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, s2s_outer_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, conn_list_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_inter_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_outer_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_max_count_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_https_url_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_https_cert_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_https_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_req, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_req, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, rebuild_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, verify_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, sd_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::s2s_server_session_veriry_req)},
  { 10, -1, sizeof(::pb::s2s_server_session_veriry_ack)},
  { 15, -1, sizeof(::pb::s2s_server_session_ping)},
  { 20, -1, sizeof(::pb::s2s_server_session_pong)},
  { 25, -1, sizeof(::pb::s2s_client_session_ping)},
  { 30, -1, sizeof(::pb::s2s_client_session_pong)},
  { 35, -1, sizeof(::pb::sd_conn_attr)},
  { 46, -1, sizeof(::pb::service_discovery)},
  { 61, -1, sizeof(::pb::service_discovery_req)},
  { 68, -1, sizeof(::pb::service_discovery_ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_veriry_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_veriry_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_client_session_ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_client_session_pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_sd_conn_attr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_service_discovery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_service_discovery_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_service_discovery_ack_default_instance_),
};

const char descriptor_table_protodef_ss_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rss_base.proto\022\002pb\"{\n\035s2s_server_sessio"
  "n_veriry_req\022\021\n\tserver_id\030\001 \001(\004\022\023\n\013serve"
  "r_type\030\002 \001(\r\022\027\n\017server_type_str\030\003 \001(\t\022\n\n"
  "\002ip\030\004 \001(\t\022\r\n\005token\030\005 \001(\t\"\037\n\035s2s_server_s"
  "ession_veriry_ack\"\031\n\027s2s_server_session_"
  "ping\"\031\n\027s2s_server_session_pong\"\031\n\027s2s_c"
  "lient_session_ping\"\031\n\027s2s_client_session"
  "_pong\"|\n\014sd_conn_attr\022\021\n\tserver_id\030\001 \001(\004"
  "\022\023\n\013server_type\030\002 \001(\r\022\027\n\017server_type_str"
  "\030\003 \001(\t\022\r\n\005inter\030\004 \001(\t\022\r\n\005outer\030\005 \001(\t\022\r\n\005"
  "token\030\006 \001(\t\"\220\002\n\021service_discovery\022\021\n\tser"
  "ver_id\030\001 \001(\004\022\030\n\020s2s_inter_listen\030\002 \001(\t\022\030"
  "\n\020s2s_outer_listen\030\003 \001(\t\022#\n\tconn_list\030\004 "
  "\003(\0132\020.pb.sd_conn_attr\022\030\n\020c2s_inter_liste"
  "n\030\005 \001(\t\022\030\n\020c2s_outer_listen\030\006 \001(\t\022\025\n\rc2s"
  "_max_count\030\007 \001(\r\022\025\n\rc2s_https_url\030\010 \001(\t\022"
  "\026\n\016c2s_https_cert\030\t \001(\t\022\025\n\rc2s_https_key"
  "\030\n \001(\t\"9\n\025service_discovery_req\022\021\n\tserve"
  "r_id\030\001 \001(\004\022\r\n\005token\030\002 \001(\t\"j\n\025service_dis"
  "covery_ack\022\024\n\014rebuild_flag\030\001 \001(\010\022\023\n\013veri"
  "fy_flag\030\002 \001(\010\022&\n\007sd_info\030\003 \001(\0132\025.pb.serv"
  "ice_discovery*\311\002\n\014S2SBaseMsgId\022\027\n\023s2s_ba"
  "se_min_msg_id\020\000\022$\n s2s_server_session_ve"
  "riry_req_id\020\001\022$\n s2s_server_session_veri"
  "ry_ack_id\020\002\022\036\n\032s2s_server_session_ping_i"
  "d\020\003\022\036\n\032s2s_server_session_pong_id\020\004\022\036\n\032s"
  "2s_client_session_ping_id\020\005\022\036\n\032s2s_clien"
  "t_session_pong_id\020\006\022\034\n\030service_discovery"
  "_req_id\020\007\022\034\n\030service_discovery_ack_id\020\010\022"
  "\030\n\023s2s_base_max_msg_id\020\253\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ss_5fbase_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ss_5fbase_2eproto_sccs[10] = {
  &scc_info_s2s_client_session_ping_ss_5fbase_2eproto.base,
  &scc_info_s2s_client_session_pong_ss_5fbase_2eproto.base,
  &scc_info_s2s_server_session_ping_ss_5fbase_2eproto.base,
  &scc_info_s2s_server_session_pong_ss_5fbase_2eproto.base,
  &scc_info_s2s_server_session_veriry_ack_ss_5fbase_2eproto.base,
  &scc_info_s2s_server_session_veriry_req_ss_5fbase_2eproto.base,
  &scc_info_sd_conn_attr_ss_5fbase_2eproto.base,
  &scc_info_service_discovery_ss_5fbase_2eproto.base,
  &scc_info_service_discovery_ack_ss_5fbase_2eproto.base,
  &scc_info_service_discovery_req_ss_5fbase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ss_5fbase_2eproto_once;
static bool descriptor_table_ss_5fbase_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ss_5fbase_2eproto = {
  &descriptor_table_ss_5fbase_2eproto_initialized, descriptor_table_protodef_ss_5fbase_2eproto, "ss_base.proto", 1193,
  &descriptor_table_ss_5fbase_2eproto_once, descriptor_table_ss_5fbase_2eproto_sccs, descriptor_table_ss_5fbase_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_ss_5fbase_2eproto::offsets,
  file_level_metadata_ss_5fbase_2eproto, 10, file_level_enum_descriptors_ss_5fbase_2eproto, file_level_service_descriptors_ss_5fbase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ss_5fbase_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ss_5fbase_2eproto), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S2SBaseMsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_5fbase_2eproto);
  return file_level_enum_descriptors_ss_5fbase_2eproto[0];
}
bool S2SBaseMsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 299:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void s2s_server_session_veriry_req::InitAsDefaultInstance() {
}
class s2s_server_session_veriry_req::_Internal {
 public:
};

s2s_server_session_veriry_req::s2s_server_session_veriry_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2s_server_session_veriry_req)
}
s2s_server_session_veriry_req::s2s_server_session_veriry_req(const s2s_server_session_veriry_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_type_str().empty()) {
    server_type_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_type_str_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_veriry_req)
}

void s2s_server_session_veriry_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_s2s_server_session_veriry_req_ss_5fbase_2eproto.base);
  server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
}

s2s_server_session_veriry_req::~s2s_server_session_veriry_req() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_veriry_req)
  SharedDtor();
}

void s2s_server_session_veriry_req::SharedDtor() {
  server_type_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void s2s_server_session_veriry_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2s_server_session_veriry_req& s2s_server_session_veriry_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_s2s_server_session_veriry_req_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void s2s_server_session_veriry_req::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_veriry_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_type_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _internal_metadata_.Clear();
}

const char* s2s_server_session_veriry_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_type_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_server_type_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.s2s_server_session_veriry_req.server_type_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.s2s_server_session_veriry_req.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.s2s_server_session_veriry_req.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_veriry_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_veriry_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // uint32 server_type = 2;
  if (this->server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_type(), target);
  }

  // string server_type_str = 3;
  if (this->server_type_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_type_str().data(), static_cast<int>(this->_internal_server_type_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.s2s_server_session_veriry_req.server_type_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_server_type_str(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.s2s_server_session_veriry_req.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.s2s_server_session_veriry_req.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_veriry_req)
  return target;
}

size_t s2s_server_session_veriry_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_veriry_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_type_str = 3;
  if (this->server_type_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_type_str());
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string token = 5;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  // uint32 server_type = 2;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2s_server_session_veriry_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.s2s_server_session_veriry_req)
  GOOGLE_DCHECK_NE(&from, this);
  const s2s_server_session_veriry_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<s2s_server_session_veriry_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.s2s_server_session_veriry_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.s2s_server_session_veriry_req)
    MergeFrom(*source);
  }
}

void s2s_server_session_veriry_req::MergeFrom(const s2s_server_session_veriry_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_veriry_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_type_str().size() > 0) {

    server_type_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_type_str_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.server_type() != 0) {
    _internal_set_server_type(from._internal_server_type());
  }
}

void s2s_server_session_veriry_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.s2s_server_session_veriry_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2s_server_session_veriry_req::CopyFrom(const s2s_server_session_veriry_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_veriry_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_veriry_req::IsInitialized() const {
  return true;
}

void s2s_server_session_veriry_req::InternalSwap(s2s_server_session_veriry_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_type_str_.Swap(&other->server_type_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(server_type_, other->server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_veriry_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void s2s_server_session_veriry_ack::InitAsDefaultInstance() {
}
class s2s_server_session_veriry_ack::_Internal {
 public:
};

s2s_server_session_veriry_ack::s2s_server_session_veriry_ack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2s_server_session_veriry_ack)
}
s2s_server_session_veriry_ack::s2s_server_session_veriry_ack(const s2s_server_session_veriry_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_veriry_ack)
}

void s2s_server_session_veriry_ack::SharedCtor() {
}

s2s_server_session_veriry_ack::~s2s_server_session_veriry_ack() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_veriry_ack)
  SharedDtor();
}

void s2s_server_session_veriry_ack::SharedDtor() {
}

void s2s_server_session_veriry_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2s_server_session_veriry_ack& s2s_server_session_veriry_ack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_s2s_server_session_veriry_ack_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void s2s_server_session_veriry_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_veriry_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* s2s_server_session_veriry_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_veriry_ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_veriry_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_veriry_ack)
  return target;
}

size_t s2s_server_session_veriry_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_veriry_ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2s_server_session_veriry_ack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.s2s_server_session_veriry_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const s2s_server_session_veriry_ack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<s2s_server_session_veriry_ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.s2s_server_session_veriry_ack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.s2s_server_session_veriry_ack)
    MergeFrom(*source);
  }
}

void s2s_server_session_veriry_ack::MergeFrom(const s2s_server_session_veriry_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_veriry_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void s2s_server_session_veriry_ack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.s2s_server_session_veriry_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2s_server_session_veriry_ack::CopyFrom(const s2s_server_session_veriry_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_veriry_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_veriry_ack::IsInitialized() const {
  return true;
}

void s2s_server_session_veriry_ack::InternalSwap(s2s_server_session_veriry_ack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_veriry_ack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void s2s_server_session_ping::InitAsDefaultInstance() {
}
class s2s_server_session_ping::_Internal {
 public:
};

s2s_server_session_ping::s2s_server_session_ping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2s_server_session_ping)
}
s2s_server_session_ping::s2s_server_session_ping(const s2s_server_session_ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_ping)
}

void s2s_server_session_ping::SharedCtor() {
}

s2s_server_session_ping::~s2s_server_session_ping() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_ping)
  SharedDtor();
}

void s2s_server_session_ping::SharedDtor() {
}

void s2s_server_session_ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2s_server_session_ping& s2s_server_session_ping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_s2s_server_session_ping_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void s2s_server_session_ping::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* s2s_server_session_ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_ping)
  return target;
}

size_t s2s_server_session_ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2s_server_session_ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.s2s_server_session_ping)
  GOOGLE_DCHECK_NE(&from, this);
  const s2s_server_session_ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<s2s_server_session_ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.s2s_server_session_ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.s2s_server_session_ping)
    MergeFrom(*source);
  }
}

void s2s_server_session_ping::MergeFrom(const s2s_server_session_ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void s2s_server_session_ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.s2s_server_session_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2s_server_session_ping::CopyFrom(const s2s_server_session_ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_ping::IsInitialized() const {
  return true;
}

void s2s_server_session_ping::InternalSwap(s2s_server_session_ping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void s2s_server_session_pong::InitAsDefaultInstance() {
}
class s2s_server_session_pong::_Internal {
 public:
};

s2s_server_session_pong::s2s_server_session_pong()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2s_server_session_pong)
}
s2s_server_session_pong::s2s_server_session_pong(const s2s_server_session_pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_pong)
}

void s2s_server_session_pong::SharedCtor() {
}

s2s_server_session_pong::~s2s_server_session_pong() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_pong)
  SharedDtor();
}

void s2s_server_session_pong::SharedDtor() {
}

void s2s_server_session_pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2s_server_session_pong& s2s_server_session_pong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_s2s_server_session_pong_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void s2s_server_session_pong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* s2s_server_session_pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_pong)
  return target;
}

size_t s2s_server_session_pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2s_server_session_pong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.s2s_server_session_pong)
  GOOGLE_DCHECK_NE(&from, this);
  const s2s_server_session_pong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<s2s_server_session_pong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.s2s_server_session_pong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.s2s_server_session_pong)
    MergeFrom(*source);
  }
}

void s2s_server_session_pong::MergeFrom(const s2s_server_session_pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void s2s_server_session_pong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.s2s_server_session_pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2s_server_session_pong::CopyFrom(const s2s_server_session_pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_pong::IsInitialized() const {
  return true;
}

void s2s_server_session_pong::InternalSwap(s2s_server_session_pong* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_pong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void s2s_client_session_ping::InitAsDefaultInstance() {
}
class s2s_client_session_ping::_Internal {
 public:
};

s2s_client_session_ping::s2s_client_session_ping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2s_client_session_ping)
}
s2s_client_session_ping::s2s_client_session_ping(const s2s_client_session_ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_client_session_ping)
}

void s2s_client_session_ping::SharedCtor() {
}

s2s_client_session_ping::~s2s_client_session_ping() {
  // @@protoc_insertion_point(destructor:pb.s2s_client_session_ping)
  SharedDtor();
}

void s2s_client_session_ping::SharedDtor() {
}

void s2s_client_session_ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2s_client_session_ping& s2s_client_session_ping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_s2s_client_session_ping_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void s2s_client_session_ping::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_client_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* s2s_client_session_ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_client_session_ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_client_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_client_session_ping)
  return target;
}

size_t s2s_client_session_ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_client_session_ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2s_client_session_ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.s2s_client_session_ping)
  GOOGLE_DCHECK_NE(&from, this);
  const s2s_client_session_ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<s2s_client_session_ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.s2s_client_session_ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.s2s_client_session_ping)
    MergeFrom(*source);
  }
}

void s2s_client_session_ping::MergeFrom(const s2s_client_session_ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_client_session_ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void s2s_client_session_ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.s2s_client_session_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2s_client_session_ping::CopyFrom(const s2s_client_session_ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_client_session_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_client_session_ping::IsInitialized() const {
  return true;
}

void s2s_client_session_ping::InternalSwap(s2s_client_session_ping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_client_session_ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void s2s_client_session_pong::InitAsDefaultInstance() {
}
class s2s_client_session_pong::_Internal {
 public:
};

s2s_client_session_pong::s2s_client_session_pong()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2s_client_session_pong)
}
s2s_client_session_pong::s2s_client_session_pong(const s2s_client_session_pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_client_session_pong)
}

void s2s_client_session_pong::SharedCtor() {
}

s2s_client_session_pong::~s2s_client_session_pong() {
  // @@protoc_insertion_point(destructor:pb.s2s_client_session_pong)
  SharedDtor();
}

void s2s_client_session_pong::SharedDtor() {
}

void s2s_client_session_pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2s_client_session_pong& s2s_client_session_pong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_s2s_client_session_pong_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void s2s_client_session_pong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_client_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* s2s_client_session_pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_client_session_pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_client_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_client_session_pong)
  return target;
}

size_t s2s_client_session_pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_client_session_pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2s_client_session_pong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.s2s_client_session_pong)
  GOOGLE_DCHECK_NE(&from, this);
  const s2s_client_session_pong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<s2s_client_session_pong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.s2s_client_session_pong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.s2s_client_session_pong)
    MergeFrom(*source);
  }
}

void s2s_client_session_pong::MergeFrom(const s2s_client_session_pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_client_session_pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void s2s_client_session_pong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.s2s_client_session_pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2s_client_session_pong::CopyFrom(const s2s_client_session_pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_client_session_pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_client_session_pong::IsInitialized() const {
  return true;
}

void s2s_client_session_pong::InternalSwap(s2s_client_session_pong* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_client_session_pong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sd_conn_attr::InitAsDefaultInstance() {
}
class sd_conn_attr::_Internal {
 public:
};

sd_conn_attr::sd_conn_attr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.sd_conn_attr)
}
sd_conn_attr::sd_conn_attr(const sd_conn_attr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_type_str().empty()) {
    server_type_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_type_str_);
  }
  inter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inter().empty()) {
    inter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inter_);
  }
  outer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outer().empty()) {
    outer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outer_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  // @@protoc_insertion_point(copy_constructor:pb.sd_conn_attr)
}

void sd_conn_attr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sd_conn_attr_ss_5fbase_2eproto.base);
  server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
}

sd_conn_attr::~sd_conn_attr() {
  // @@protoc_insertion_point(destructor:pb.sd_conn_attr)
  SharedDtor();
}

void sd_conn_attr::SharedDtor() {
  server_type_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sd_conn_attr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sd_conn_attr& sd_conn_attr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sd_conn_attr_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void sd_conn_attr::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.sd_conn_attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_type_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _internal_metadata_.Clear();
}

const char* sd_conn_attr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_type_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_server_type_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.server_type_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_inter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.inter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string outer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_outer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.outer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sd_conn_attr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.sd_conn_attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // uint32 server_type = 2;
  if (this->server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_type(), target);
  }

  // string server_type_str = 3;
  if (this->server_type_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_type_str().data(), static_cast<int>(this->_internal_server_type_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.server_type_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_server_type_str(), target);
  }

  // string inter = 4;
  if (this->inter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inter().data(), static_cast<int>(this->_internal_inter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.inter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_inter(), target);
  }

  // string outer = 5;
  if (this->outer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outer().data(), static_cast<int>(this->_internal_outer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.outer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_outer(), target);
  }

  // string token = 6;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.sd_conn_attr)
  return target;
}

size_t sd_conn_attr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.sd_conn_attr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_type_str = 3;
  if (this->server_type_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_type_str());
  }

  // string inter = 4;
  if (this->inter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inter());
  }

  // string outer = 5;
  if (this->outer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outer());
  }

  // string token = 6;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  // uint32 server_type = 2;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sd_conn_attr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.sd_conn_attr)
  GOOGLE_DCHECK_NE(&from, this);
  const sd_conn_attr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sd_conn_attr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.sd_conn_attr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.sd_conn_attr)
    MergeFrom(*source);
  }
}

void sd_conn_attr::MergeFrom(const sd_conn_attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.sd_conn_attr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_type_str().size() > 0) {

    server_type_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_type_str_);
  }
  if (from.inter().size() > 0) {

    inter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inter_);
  }
  if (from.outer().size() > 0) {

    outer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outer_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.server_type() != 0) {
    _internal_set_server_type(from._internal_server_type());
  }
}

void sd_conn_attr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.sd_conn_attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sd_conn_attr::CopyFrom(const sd_conn_attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.sd_conn_attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sd_conn_attr::IsInitialized() const {
  return true;
}

void sd_conn_attr::InternalSwap(sd_conn_attr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_type_str_.Swap(&other->server_type_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inter_.Swap(&other->inter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outer_.Swap(&other->outer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(server_type_, other->server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sd_conn_attr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void service_discovery::InitAsDefaultInstance() {
}
class service_discovery::_Internal {
 public:
};

service_discovery::service_discovery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.service_discovery)
}
service_discovery::service_discovery(const service_discovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      conn_list_(from.conn_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2s_inter_listen().empty()) {
    s2s_inter_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s2s_inter_listen_);
  }
  s2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2s_outer_listen().empty()) {
    s2s_outer_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s2s_outer_listen_);
  }
  c2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_inter_listen().empty()) {
    c2s_inter_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_inter_listen_);
  }
  c2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_outer_listen().empty()) {
    c2s_outer_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_outer_listen_);
  }
  c2s_https_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_https_url().empty()) {
    c2s_https_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_https_url_);
  }
  c2s_https_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_https_cert().empty()) {
    c2s_https_cert_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_https_cert_);
  }
  c2s_https_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_https_key().empty()) {
    c2s_https_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_https_key_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&c2s_max_count_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(c2s_max_count_));
  // @@protoc_insertion_point(copy_constructor:pb.service_discovery)
}

void service_discovery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_service_discovery_ss_5fbase_2eproto.base);
  s2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c2s_max_count_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(c2s_max_count_));
}

service_discovery::~service_discovery() {
  // @@protoc_insertion_point(destructor:pb.service_discovery)
  SharedDtor();
}

void service_discovery::SharedDtor() {
  s2s_inter_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2s_outer_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_inter_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_outer_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void service_discovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const service_discovery& service_discovery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_service_discovery_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void service_discovery::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.service_discovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conn_list_.Clear();
  s2s_inter_listen_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2s_outer_listen_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_inter_listen_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_outer_listen_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_cert_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c2s_max_count_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(c2s_max_count_));
  _internal_metadata_.Clear();
}

const char* service_discovery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2s_inter_listen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_s2s_inter_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.s2s_inter_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2s_outer_listen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_s2s_outer_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.s2s_outer_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.sd_conn_attr conn_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conn_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string c2s_inter_listen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_c2s_inter_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_inter_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_outer_listen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_c2s_outer_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_outer_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 c2s_max_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          c2s_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_https_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_c2s_https_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_https_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_https_cert = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_c2s_https_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_https_cert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_https_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_c2s_https_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_https_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* service_discovery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.service_discovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // string s2s_inter_listen = 2;
  if (this->s2s_inter_listen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2s_inter_listen().data(), static_cast<int>(this->_internal_s2s_inter_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.s2s_inter_listen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_s2s_inter_listen(), target);
  }

  // string s2s_outer_listen = 3;
  if (this->s2s_outer_listen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2s_outer_listen().data(), static_cast<int>(this->_internal_s2s_outer_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.s2s_outer_listen");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_s2s_outer_listen(), target);
  }

  // repeated .pb.sd_conn_attr conn_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conn_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_conn_list(i), target, stream);
  }

  // string c2s_inter_listen = 5;
  if (this->c2s_inter_listen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_inter_listen().data(), static_cast<int>(this->_internal_c2s_inter_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_inter_listen");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_c2s_inter_listen(), target);
  }

  // string c2s_outer_listen = 6;
  if (this->c2s_outer_listen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_outer_listen().data(), static_cast<int>(this->_internal_c2s_outer_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_outer_listen");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_c2s_outer_listen(), target);
  }

  // uint32 c2s_max_count = 7;
  if (this->c2s_max_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_c2s_max_count(), target);
  }

  // string c2s_https_url = 8;
  if (this->c2s_https_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_https_url().data(), static_cast<int>(this->_internal_c2s_https_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_https_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_c2s_https_url(), target);
  }

  // string c2s_https_cert = 9;
  if (this->c2s_https_cert().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_https_cert().data(), static_cast<int>(this->_internal_c2s_https_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_https_cert");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_c2s_https_cert(), target);
  }

  // string c2s_https_key = 10;
  if (this->c2s_https_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_https_key().data(), static_cast<int>(this->_internal_c2s_https_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_https_key");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_c2s_https_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.service_discovery)
  return target;
}

size_t service_discovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.service_discovery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.sd_conn_attr conn_list = 4;
  total_size += 1UL * this->_internal_conn_list_size();
  for (const auto& msg : this->conn_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string s2s_inter_listen = 2;
  if (this->s2s_inter_listen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2s_inter_listen());
  }

  // string s2s_outer_listen = 3;
  if (this->s2s_outer_listen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2s_outer_listen());
  }

  // string c2s_inter_listen = 5;
  if (this->c2s_inter_listen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_inter_listen());
  }

  // string c2s_outer_listen = 6;
  if (this->c2s_outer_listen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_outer_listen());
  }

  // string c2s_https_url = 8;
  if (this->c2s_https_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_https_url());
  }

  // string c2s_https_cert = 9;
  if (this->c2s_https_cert().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_https_cert());
  }

  // string c2s_https_key = 10;
  if (this->c2s_https_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_https_key());
  }

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  // uint32 c2s_max_count = 7;
  if (this->c2s_max_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_c2s_max_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void service_discovery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.service_discovery)
  GOOGLE_DCHECK_NE(&from, this);
  const service_discovery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<service_discovery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.service_discovery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.service_discovery)
    MergeFrom(*source);
  }
}

void service_discovery::MergeFrom(const service_discovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.service_discovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conn_list_.MergeFrom(from.conn_list_);
  if (from.s2s_inter_listen().size() > 0) {

    s2s_inter_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s2s_inter_listen_);
  }
  if (from.s2s_outer_listen().size() > 0) {

    s2s_outer_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s2s_outer_listen_);
  }
  if (from.c2s_inter_listen().size() > 0) {

    c2s_inter_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_inter_listen_);
  }
  if (from.c2s_outer_listen().size() > 0) {

    c2s_outer_listen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_outer_listen_);
  }
  if (from.c2s_https_url().size() > 0) {

    c2s_https_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_https_url_);
  }
  if (from.c2s_https_cert().size() > 0) {

    c2s_https_cert_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_https_cert_);
  }
  if (from.c2s_https_key().size() > 0) {

    c2s_https_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c2s_https_key_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.c2s_max_count() != 0) {
    _internal_set_c2s_max_count(from._internal_c2s_max_count());
  }
}

void service_discovery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.service_discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void service_discovery::CopyFrom(const service_discovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.service_discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_discovery::IsInitialized() const {
  return true;
}

void service_discovery::InternalSwap(service_discovery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  conn_list_.InternalSwap(&other->conn_list_);
  s2s_inter_listen_.Swap(&other->s2s_inter_listen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  s2s_outer_listen_.Swap(&other->s2s_outer_listen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c2s_inter_listen_.Swap(&other->c2s_inter_listen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c2s_outer_listen_.Swap(&other->c2s_outer_listen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c2s_https_url_.Swap(&other->c2s_https_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c2s_https_cert_.Swap(&other->c2s_https_cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c2s_https_key_.Swap(&other->c2s_https_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(c2s_max_count_, other->c2s_max_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata service_discovery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void service_discovery_req::InitAsDefaultInstance() {
}
class service_discovery_req::_Internal {
 public:
};

service_discovery_req::service_discovery_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.service_discovery_req)
}
service_discovery_req::service_discovery_req(const service_discovery_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:pb.service_discovery_req)
}

void service_discovery_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_service_discovery_req_ss_5fbase_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = PROTOBUF_ULONGLONG(0);
}

service_discovery_req::~service_discovery_req() {
  // @@protoc_insertion_point(destructor:pb.service_discovery_req)
  SharedDtor();
}

void service_discovery_req::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void service_discovery_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const service_discovery_req& service_discovery_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_service_discovery_req_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void service_discovery_req::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.service_discovery_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* service_discovery_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery_req.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* service_discovery_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.service_discovery_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery_req.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.service_discovery_req)
  return target;
}

size_t service_discovery_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.service_discovery_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void service_discovery_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.service_discovery_req)
  GOOGLE_DCHECK_NE(&from, this);
  const service_discovery_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<service_discovery_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.service_discovery_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.service_discovery_req)
    MergeFrom(*source);
  }
}

void service_discovery_req::MergeFrom(const service_discovery_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.service_discovery_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void service_discovery_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.service_discovery_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void service_discovery_req::CopyFrom(const service_discovery_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.service_discovery_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_discovery_req::IsInitialized() const {
  return true;
}

void service_discovery_req::InternalSwap(service_discovery_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata service_discovery_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void service_discovery_ack::InitAsDefaultInstance() {
  ::pb::_service_discovery_ack_default_instance_._instance.get_mutable()->sd_info_ = const_cast< ::pb::service_discovery*>(
      ::pb::service_discovery::internal_default_instance());
}
class service_discovery_ack::_Internal {
 public:
  static const ::pb::service_discovery& sd_info(const service_discovery_ack* msg);
};

const ::pb::service_discovery&
service_discovery_ack::_Internal::sd_info(const service_discovery_ack* msg) {
  return *msg->sd_info_;
}
service_discovery_ack::service_discovery_ack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.service_discovery_ack)
}
service_discovery_ack::service_discovery_ack(const service_discovery_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sd_info()) {
    sd_info_ = new ::pb::service_discovery(*from.sd_info_);
  } else {
    sd_info_ = nullptr;
  }
  ::memcpy(&rebuild_flag_, &from.rebuild_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&verify_flag_) -
    reinterpret_cast<char*>(&rebuild_flag_)) + sizeof(verify_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.service_discovery_ack)
}

void service_discovery_ack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_service_discovery_ack_ss_5fbase_2eproto.base);
  ::memset(&sd_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_flag_) -
      reinterpret_cast<char*>(&sd_info_)) + sizeof(verify_flag_));
}

service_discovery_ack::~service_discovery_ack() {
  // @@protoc_insertion_point(destructor:pb.service_discovery_ack)
  SharedDtor();
}

void service_discovery_ack::SharedDtor() {
  if (this != internal_default_instance()) delete sd_info_;
}

void service_discovery_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const service_discovery_ack& service_discovery_ack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_service_discovery_ack_ss_5fbase_2eproto.base);
  return *internal_default_instance();
}


void service_discovery_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.service_discovery_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sd_info_ != nullptr) {
    delete sd_info_;
  }
  sd_info_ = nullptr;
  ::memset(&rebuild_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_flag_) -
      reinterpret_cast<char*>(&rebuild_flag_)) + sizeof(verify_flag_));
  _internal_metadata_.Clear();
}

const char* service_discovery_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool rebuild_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rebuild_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verify_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verify_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.service_discovery sd_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sd_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* service_discovery_ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.service_discovery_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rebuild_flag = 1;
  if (this->rebuild_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rebuild_flag(), target);
  }

  // bool verify_flag = 2;
  if (this->verify_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verify_flag(), target);
  }

  // .pb.service_discovery sd_info = 3;
  if (this->has_sd_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sd_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.service_discovery_ack)
  return target;
}

size_t service_discovery_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.service_discovery_ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.service_discovery sd_info = 3;
  if (this->has_sd_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sd_info_);
  }

  // bool rebuild_flag = 1;
  if (this->rebuild_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool verify_flag = 2;
  if (this->verify_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void service_discovery_ack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.service_discovery_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const service_discovery_ack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<service_discovery_ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.service_discovery_ack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.service_discovery_ack)
    MergeFrom(*source);
  }
}

void service_discovery_ack::MergeFrom(const service_discovery_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.service_discovery_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sd_info()) {
    _internal_mutable_sd_info()->::pb::service_discovery::MergeFrom(from._internal_sd_info());
  }
  if (from.rebuild_flag() != 0) {
    _internal_set_rebuild_flag(from._internal_rebuild_flag());
  }
  if (from.verify_flag() != 0) {
    _internal_set_verify_flag(from._internal_verify_flag());
  }
}

void service_discovery_ack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.service_discovery_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void service_discovery_ack::CopyFrom(const service_discovery_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.service_discovery_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_discovery_ack::IsInitialized() const {
  return true;
}

void service_discovery_ack::InternalSwap(service_discovery_ack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sd_info_, other->sd_info_);
  swap(rebuild_flag_, other->rebuild_flag_);
  swap(verify_flag_, other->verify_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata service_discovery_ack::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_veriry_req* Arena::CreateMaybeMessage< ::pb::s2s_server_session_veriry_req >(Arena* arena) {
  return Arena::CreateInternal< ::pb::s2s_server_session_veriry_req >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_veriry_ack* Arena::CreateMaybeMessage< ::pb::s2s_server_session_veriry_ack >(Arena* arena) {
  return Arena::CreateInternal< ::pb::s2s_server_session_veriry_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_ping* Arena::CreateMaybeMessage< ::pb::s2s_server_session_ping >(Arena* arena) {
  return Arena::CreateInternal< ::pb::s2s_server_session_ping >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_pong* Arena::CreateMaybeMessage< ::pb::s2s_server_session_pong >(Arena* arena) {
  return Arena::CreateInternal< ::pb::s2s_server_session_pong >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_client_session_ping* Arena::CreateMaybeMessage< ::pb::s2s_client_session_ping >(Arena* arena) {
  return Arena::CreateInternal< ::pb::s2s_client_session_ping >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_client_session_pong* Arena::CreateMaybeMessage< ::pb::s2s_client_session_pong >(Arena* arena) {
  return Arena::CreateInternal< ::pb::s2s_client_session_pong >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::sd_conn_attr* Arena::CreateMaybeMessage< ::pb::sd_conn_attr >(Arena* arena) {
  return Arena::CreateInternal< ::pb::sd_conn_attr >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::service_discovery* Arena::CreateMaybeMessage< ::pb::service_discovery >(Arena* arena) {
  return Arena::CreateInternal< ::pb::service_discovery >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::service_discovery_req* Arena::CreateMaybeMessage< ::pb::service_discovery_req >(Arena* arena) {
  return Arena::CreateInternal< ::pb::service_discovery_req >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::service_discovery_ack* Arena::CreateMaybeMessage< ::pb::service_discovery_ack >(Arena* arena) {
  return Arena::CreateInternal< ::pb::service_discovery_ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
